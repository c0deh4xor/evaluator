convert to wdl-ol

bug: the text box doesn't update when selecting a User Preset in Windows Reaper, have to switch UI modes to get it to show up

a basic oscilloscope view for the gui?

some number of sub-expressions?
+ in the gui would look something like
A = [       ]
B = [       ]
C = [       ]
Each text field for each letter would compile to a user-defined function that behaves the same as built-in function operators like #, $, and so forth.
Could use 'i' as a special variable to hold the input value, but might also want a setting for each one to indicate whether it requires an argument.
Actually, easier to implement user variables with fixed values defined by small expressions. This is because we can simply substitute into the
main expression box before compiling it. To do functions it would be necessary to add support for that to the Expression class (which would be a fun challenge).

different modes for when to reset t: 
- with every note on (as it does currently)
- follow project time (ie when note on is received set t to current project time in samples, increment from there)

ability to run t at a user-defined rate (for instance if they want to always run it 44.1khz)

custom text-entry field because of inconsistencies in text-entry field between platforms and improve behavior, eg:
- clicking the field in Windows causes the font size to increase a lot, but it should remain the same
- clicking the field in Windows selects the entire string, but should simply place the carat for editing
+ custom text-entry means possibly easier to have some sort of syntax-coloring, or indicating exactly where a syntax error is

support branching with ternary operator?
- eg: t%10 < 5 ? 0 : r
- if used outside of ternary t%10 < 5 should eval something useful. 0 and 1 are most obvi, but 0 and r-1 might be more useful.

support assigning new value to expression var from within expression? 
- eg: b={t*fn} | b*2, would be same as t*fn | t*fn*2
- or: @b{t*fn}, which is nice because @ immediately alerts parser that a var set is coming up, but doesn’t necessarily imply that it will also resolve to the value of b when the expression is evaluated.

figure out a way to identify undefined variables when compiling? this may not be worth supporting.

maybe someday figure out how to embed this font for use in the interface: http://webdraft.hu/fonts/classic-console/